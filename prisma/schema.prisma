generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  firstname     String
  lastname      String
  address       String
  city          String
  postalCode    String
  email         String      @unique
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  association   Association @relation(fields: [associationId], references: [id])
  associationId Int
}

model SuperUser {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  logo           String?
  date           DateTime      @db.Date
  isPublished    Boolean       @default(false)
  isPlace        Boolean       @default(false)
  place          String?
  isEndDate      Boolean       @default(false)
  endDate        DateTime?     @db.Date
  isHour         Boolean       @default(false)
  hour           DateTime?     @db.Time
  isEndHour      Boolean       @default(false)
  endHour        DateTime?     @db.Time
  isAddress      Boolean       @default(false)
  address        String?
  isPeopleLimit  Boolean       @default(false)
  peopleLimit    Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  association    Association   @relation(fields: [associationId], references: [id])
  associationId  Int
  displayType    DisplayType   @relation(fields: [displayTypeId], references: [id])
  displayTypeId  Int
  eventType      EventType     @relation(fields: [eventTypeId], references: [id])
  eventTypeId    Int
  subEventType   SubEventType  @relation(fields: [subEventTypeId], references: [id])
  subEventTypeId Int
  eventPeople    EventPeople[]
  eventTicket    EventTicket[]
}

model Association {
  id                Int             @id @default(autoincrement())
  name              String
  image             String?
  title             String
  description       String
  firstname         String
  lastname          String
  role              String
  email             String
  phone             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  associationType   AssociationType @relation(fields: [associationTypeId], references: [id])
  associationTypeId Int
  campus            Campus          @relation(fields: [campusId], references: [id])
  campusId          Int
  events            Event[]
  users             User[]
}

model DisplayType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model EventType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  events    Event[]
}

model SubEventType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  events    Event[]
}

model AssociationType {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  association Association[]
}

model Campus {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  address      String
  city         String
  image        String?
  firstname    String
  lastname     String
  role         String
  email        String
  phone        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  campusType   CampusType    @relation(fields: [campusTypeId], references: [id])
  campusTypeId Int
  nbStudent    NbStudent     @relation(fields: [nbStudentId], references: [id])
  nbStudentId  Int
  association  Association[]
}

model CampusType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  campus    Campus[]
}

model NbStudent {
  id        Int      @id @default(autoincrement())
  number    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  campus    Campus[]
}

model EventTicket {
  id          Int           @id @default(autoincrement())
  name        String
  price       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  event       Event?        @relation(fields: [eventId], references: [id])
  eventId     Int?
  eventPeople EventPeople[]
}

model Payment {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  eventPeople EventPeople[]
}

model EventPeople {
  id            Int          @id @default(autoincrement())
  firstname     String
  lastname      String
  date          DateTime     @db.Date
  email         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  eventTicket   EventTicket? @relation(fields: [eventTicketId], references: [id])
  eventTicketId Int?
  payment       Payment?     @relation(fields: [paymentId], references: [id])
  paymentId     Int?
  Event         Event?       @relation(fields: [eventId], references: [id])
  eventId       Int?
}
