generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  firstname  String
  lastname   String
  address    String
  city       String
  postalCode String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SuperUser {
  id         Int      @id @default(autoincrement())
  firstname  String
  lastname   String
  address    String
  city       String
  postalCode String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Event {
  id             Int          @id @default(autoincrement())
  association    Association  @relation(fields: [associationId], references: [id])
  associationId  Int
  displayType    DisplayType  @relation(fields: [displayTypeId], references: [id])
  displayTypeId  Int
  eventType      EventType    @relation(fields: [eventTypeId], references: [id])
  eventTypeId    Int
  subEventType   SubEventType @relation(fields: [subEventTypeId], references: [id])
  subEventTypeId Int
  title          String
  description    String
  logo           String?
  date           DateTime     @db.Date
  isPublished    Boolean      @default(false)
  isPlace        Boolean      @default(false)
  place          String?
  isEndDate      Boolean      @default(false)
  endDate        DateTime?    @db.Date
  isHour         Boolean      @default(false)
  hour           DateTime?    @db.Time
  isEndHour      Boolean      @default(false)
  endHour        DateTime?    @db.Time
  isAddress      Boolean      @default(false)
  address        String?
  isPeopleLimit  Boolean      @default(false)
  peopleLimit    Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Association {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Campus    Campus?  @relation(fields: [campusId], references: [id])
  campusId  Int?
}

model DisplayType {
  id        Int      @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventType {
  id        Int      @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubEventType {
  id        Int      @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campus {
  id          Int           @id @default(autoincrement())
  name        String
  association Association[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
